#!/bin/bash

# Script to fix Perplexity MCP configuration issues
# Forces Claude Code to use only local configuration
# 
# COPY THIS FILE to fix-mcp-config.sh and replace YOUR_PERPLEXITY_API_KEY_HERE
# with your actual Perplexity API key before running

set -e

echo "ðŸ”§ Fixing MCP Configuration..."

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Backup any existing global config
if [ -f ~/.config/claude-code/settings.json ]; then
    print_warning "Backing up existing global Claude config..."
    mkdir -p ~/.config/claude-code/backup
    cp ~/.config/claude-code/settings.json ~/.config/claude-code/backup/settings.json.$(date +%Y%m%d_%H%M%S)
    print_status "Backup created"
fi

# Set environment variables to force local config usage
export CLAUDE_MCP_CONFIG="$(pwd)/.mcp.json"
print_status "Set CLAUDE_MCP_CONFIG to: $CLAUDE_MCP_CONFIG"

# Create a clean environment script
cat > set-mcp-env.sh << 'EOF'
#!/bin/bash
# Source this file to set MCP environment variables
export CLAUDE_MCP_CONFIG="/workspaces/hackathon_demo/mcp-integration/.mcp.json"
export PERPLEXITY_API_KEY="YOUR_PERPLEXITY_API_KEY_HERE"
export MEMORY_BANK_PATH="/workspaces/hackathon_demo/mcp-integration/config/credentials/memory_bank"
echo "âœ… MCP environment variables set"
echo "CLAUDE_MCP_CONFIG: $CLAUDE_MCP_CONFIG"
EOF

chmod +x set-mcp-env.sh
print_status "Created set-mcp-env.sh script"

# Source the environment
source set-mcp-env.sh

print_status "âœ… Configuration fix complete!"
print_warning "Next steps:"
echo "1. Replace YOUR_PERPLEXITY_API_KEY_HERE with your actual API key in set-mcp-env.sh"
echo "2. Run: source set-mcp-env.sh (to set environment variables)"
echo "3. Restart Claude Code completely"
echo "4. Test with: /mcp list (if available)"
echo "5. Or test Perplexity MCP functionality directly"